name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
      modules: ${{ steps.find-modules.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine Go version from go.mod
        id: go-version
        run: |
          echo "version=$(grep -oP '^go \K\d+\.\d+(\.\d+)?' go.mod)" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Find Go modules
        id: find-modules
        run: |
          MODULES=$(find . -name "go.mod" -exec dirname {} \; | grep -v "^./examples" | sort | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "modules=${MODULES}" >> $GITHUB_OUTPUT
          echo "Found modules: ${MODULES}"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Go Format
        run: |
          gofmt_output=$(gofmt -s -d -e .)
          if [ -n "$gofmt_output" ]; then
            echo "Go code is not properly formatted:"
            echo "$gofmt_output"
            exit 1
          fi

      - name: Go Vet
        run: |
          # Process each module directory
          for module in $(echo '${{ needs.setup.outputs.modules }}' | jq -r '.[]'); do
            echo "Running go vet in module: $module"
            cd $module
            go list ./... | grep -v "/examples/" | xargs go vet -all -composites=false -printfuncs=Debugf,Infof,Warnf,Errorf,Logf,Fatalf || exit 1
            cd $GITHUB_WORKSPACE
          done

  test:
    name: Test Go ${{ matrix.go-version }}
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.22", "1.23", "1.24"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: |
          # Process each module directory
          for module in $(echo '${{ needs.setup.outputs.modules }}' | jq -r '.[]'); do
            echo "Running tests in module: $module"
            cd $module
            go list ./... | grep -v "/examples/" | xargs go test -v -race -count=1 -timeout 5m || exit 1
            cd $GITHUB_WORKSPACE
          done

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      - name: Generate coverage report
        run: |
          # Create a combined coverage file
          echo "mode: atomic" > coverage.out

          # Process each module directory
          for module in $(echo '${{ needs.setup.outputs.modules }}' | jq -r '.[]'); do
            echo "Generating coverage for module: $module"
            cd $module

            if [ "$module" != "." ]; then
              # For non-root modules
              go list ./... | grep -v "/examples/" | xargs go test -coverprofile=module_coverage.out -covermode=atomic
              if [ -f module_coverage.out ]; then
                tail -n +2 module_coverage.out >> $GITHUB_WORKSPACE/coverage.out
                rm module_coverage.out
              fi
            else
              # For root module
              go list ./... | grep -v "/examples/" | xargs go test -coverprofile=root_coverage.out -covermode=atomic
              if [ -f root_coverage.out ]; then
                tail -n +2 root_coverage.out >> $GITHUB_WORKSPACE/coverage.out
                rm root_coverage.out
              fi
            fi

            cd $GITHUB_WORKSPACE
          done

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: alesr/tidstrom

  verify-mod:
    name: Verify Module
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      - name: Verify go.mod
        run: |
          # Process each module directory
          for module in $(echo '${{ needs.setup.outputs.modules }}' | jq -r '.[]'); do
            echo "Verifying go.mod in module: $module"
            cd $module
            go mod tidy
            if ! git diff --exit-code go.mod go.sum; then
              echo "go.mod or go.sum in $module needs to be updated. Run 'go mod tidy' locally and commit changes."
              exit 1
            fi
            cd $GITHUB_WORKSPACE
          done

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.setup.outputs.go-version }}
          cache: true

      - name: Build
        run: |
          # Process each module directory
          for module in $(echo '${{ needs.setup.outputs.modules }}' | jq -r '.[]'); do
            echo "Building module: $module"
            cd $module
            go list ./... | grep -v "/examples/" | xargs -n1 go build -v
            cd $GITHUB_WORKSPACE
          done

  sync:
    name: Sync Status
    runs-on: ubuntu-latest
    needs: [lint, test, coverage, verify-mod, build]
    if: always()
    steps:
      - name: Check previous job status
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // Filter for only the jobs we depend on
            const dependentJobs = jobs.data.jobs.filter(job =>
              ['lint', 'test', 'coverage', 'verify-mod', 'build'].includes(job.name.toLowerCase()));

            // Check if any job has failed
            const failedJobs = dependentJobs.filter(job => job.conclusion !== 'success');

            if (failedJobs.length > 0) {
              core.setFailed(`The following jobs have failed: ${failedJobs.map(job => job.name).join(', ')}`);
              return;
            }

            console.log('All required jobs have completed successfully.');

      - name: Set final status
        run: echo "âœ… CI pipeline completed successfully"
